using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Threading;
using System.ComponentModel;
using System.Net;

using MVVM;
using VKMusicSync.Model;
using VKMusicSync.ModelView;
using VKMusicSync.Handlers.Synchronize;
using vkontakte;
using VKMusicSync.Handlers;
using System.Collections.Specialized;
using System.IO;

namespace VKMusicSync.ModelView
{
    class SoundDownloaderMovelView: ViewModelBase
    {
        #region Private variables

        private Profile Profile = new Profile();
        private List<Sound> sounds = new List<Sound>();

        #endregion

        #region Binding variables


        //public System.Windows.Visibility ProgressVisibility = System.Windows.Visibility.Visible;


        public ObservableCollection<SoundModelView> Sounds { get; set; }


        public string UserFullName
        {
            get
            { return Profile.first_name + " " + Profile.last_name; }
            set
            {
                OnPropertyChanged("UserFullName");
            }
        }

        //private System.Windows.Media.Imaging.BitmapFrame avatar;
        private string avatar;
       // public System.Windows.Media.Imaging.BitmapFrame Avatar
        public string Avatar 
        {
            get
            {
                return avatar;
            }
            set
            {
                avatar = value;
                OnPropertyChanged("Avatar");
            }
        }

        private double progressPercentage = 0;
        public double ProgressPercentage
        {
            get
            {
                return progressPercentage;
            }
            set
            {
                progressPercentage = value;
                OnPropertyChanged("ProgressPercentage");
            }
        }
        #endregion

        #region Click Commands

        private DelegateCommand downloadFiles;
        public ICommand DownloadFiles
        {
            get
            {
                if (downloadFiles == null)
                {
                    downloadFiles = new DelegateCommand(OnDownloadFiles);
                }
                return downloadFiles;
            }

        }

        private DelegateCommand settings;
        public ICommand SettingsClick
        {
            get
            {
                if (settings == null)
                {
                    settings = new DelegateCommand(OnSettingsClick);
                }
                return settings;
            }

        }

        private DelegateCommand sync;
        public ICommand SyncClick
        {
            get
            {
                if (sync == null)
                {
                    sync = new DelegateCommand(OnSyncClick);
                }
                return sync;
            }

        }
        #endregion

        #region Constructor
        public SoundDownloaderMovelView(List<Sound> sounds)
        {
            SetSounds(sounds);
        }

        public SoundDownloaderMovelView()
        {
            sounds = new List<Sound>();
            this.Sounds = new ObservableCollection<SoundModelView>();
        }

        private void SetSounds(List<Sound> sounds)
        {
            Sounds = new ObservableCollection<SoundModelView>(sounds.Select(s => new SoundModelView(s)));
        }
        #endregion

        #region FormsActions

        private void OnSyncClick()
        {
            ComputeDataToSync();
        }

        private void OnSettingsClick()
        {
            System.Windows.Forms.MessageBox.Show("SettingsClick");
        }

        private void OnAuthClick()
        {
            var authWindow = new Auth();
            authWindow.ShowDialog();
            //System.Windows.Forms.MessageBox.Show("OnSyncClick");
        }

        public void Window_Loaded()
        {
            OnAuthClick();
            ComputeDataToSync();
        }

        #endregion

        #region Process vk data to forms

        private void ComputeDataToSync()
        {
            BackgroundWorker backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += this.Init;
            backgroundWorker.RunWorkerCompleted += this.InitDone;
            backgroundWorker.RunWorkerAsync();
        }

        

        private void Init(object sender, DoWorkEventArgs e)
        {

            int count = int.Parse(APIManager.vk.GetAudioCountFromUser(APIManager.vk.UserId, 
                                                                      false).SelectSingleNode("response")
                                                                            .InnerText);
            ProfileCommand profCommand = vkontakte.CommandsGenerator.GetUsers(APIManager.AccessData.UserId);
            this.Profile = profCommand.ExecuteForList().FirstOrDefault();
            var paths = (new List<string>() { Profile.photo, Profile.photoMedium, Profile.photoBig });
            var path = string.Empty;
            foreach(var p in paths)
                if (p.Count()>0) 
                {
                    path = p;
                    break;
                }
            if (path != string.Empty)
                Avatar = path;
            
            this.UserFullName = Profile.last_name;

            if (count > 0)
            {
                AudioCommand command = vkontakte.CommandsGenerator.GetAudioFromUser(APIManager.vk.UserId, false, 0, count);
                command.OnCommandExecuting += OnCommandLoading;
                sounds = command.ExecuteForList();
            }
        }

        private void OnCommandLoading(Object sender, DownloadProgressChangedEventArgs e)
        {
            this.ProgressPercentage = (double)Math.Abs(1 - e.ProgressPercentage);
        }

        private void InitDone(object sender, RunWorkerCompletedEventArgs e)
        {
            this.Sounds.Clear();
            for(int i=0; i<sounds.Count; i++)
                this.Sounds.Add(new SoundModelView(sounds[i]));
            SetSounds(sounds);
            this.ProgressPercentage = 100;
        }

        #endregion

        #region Load audio

        private SynhronizeAdapter adapter = new SynhronizeAdapter();

        private void OnDownloadFiles()
        {
            AudioUploadComman comm = CommandsGenerator.GetUploadServer();
            comm.Execute();
            var path = comm.ServerPath;
            var filePath = @"D:\Musik\04. Doesn't Remind Me.mp3";
            byte[] bytes = System.IO.File.ReadAllBytes(filePath);

            var values = new System.Collections.Specialized.NameValueCollection();
            //values.Add("значение", "данные");
            string variable = HttpUploadFile(path, filePath, "", "mp3", new NameValueCollection());

            var resp = Uploader.PostMethod(bytes, path);
            var streamReader = new System.IO.StreamReader(resp.GetResponseStream());
            string answer = streamReader.ReadToEnd();
            //string answer = System.Text.Encoding.UTF8.GetString(data);
          

            /*BackgroundWorker backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += this.DoWork;
            backgroundWorker.RunWorkerCompleted += this.OnCompletedAllLoad;
            backgroundWorker.RunWorkerAsync(sounds);*/
        }

        private void UploadPhoto()
        {
            //ЗАГРУЗКА ФОТОГРАФИИ
            //получение адреса сервера для загрузки фотографии
            System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            System.Net.WebRequest post_request2 = System.Net.WebRequest.Create("https://api.vkontakte.ru/method/photos.getWallUploadServer?gid=100669061&access_token=";// + textBox3.Text.Trim());
            System.Net.WebResponse post_request_response2 = post_request2.GetResponse();
            System.IO.Stream post_request_stream2 = post_request_response2.GetResponseStream();
            System.IO.StreamReader post_request_stream_reader2 = new System.IO.StreamReader(post_request_stream2);
            string post_request_answer2 = post_request_stream_reader2.ReadToEnd();
            string[] words_empty = post_request_answer2.Split('"');
            string s = words_empty[5];

            s = s.Replace("\\/", "/");
            s = s.Replace("\\/", "/");
            s = s.Replace("\\/", "/");


            //отправка файла на полученый сервер
            NameValueCollection nvc = new NameValueCollection();
            //nvc.Add("user", "user");
            //nvc.Add("passwd", "passwd");
            string s9;
            s9 = HttpUploadFile(s, @"C:\file_1.jpg", "photo", "image/jpeg", nvc);

            //textBox6.Text = s9;

            char[] delimiterChars = { ':', ',' };
            string[] parameters = s9.Split(delimiterChars);
            string server = parameters[1];

            char[] delimiterChars2 = { ':' };
            string[] parameters2 = s9.Split(delimiterChars2);
            string hash = parameters2[7];

            char[] delimiterChars3 = { '"' };
            string[] parameters3 = hash.Split(delimiterChars3);
            hash = parameters3[1];

            string photo = s9.Substring(s9.IndexOf("photo") + 8, s9.IndexOf("hash") - s9.IndexOf("photo") - 11);

            photo = photo.Replace("\\\"", "\"");



            //сохранение фотографии на сервере
            string url3 = "https://api.vk.com/method/photos.saveWallPhoto?server="; //+ server + "&photo=" + HttpUtility.UrlEncode(photo) + "&hash=" + hash + "&access_token=" + textBox3.Text.Trim();
            //textBox6.Text = textBox6.Text + " ---------- " + url3;

            System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            System.Net.WebRequest post_request3 = System.Net.WebRequest.Create(url3);
            System.Net.WebResponse post_request_response3 = post_request3.GetResponse();
            System.IO.Stream post_request_stream3 = post_request_response3.GetResponseStream();
            System.IO.StreamReader post_request_stream_reader3 = new System.IO.StreamReader(post_request_stream3);
            string post_request_answer3 = post_request_stream_reader3.ReadToEnd();

            //textBox6.Text = textBox6.Text + " ---------- " + post_request_answer3;

        }

 
        public static string HttpUploadFile(string url, string file, string paramName, string contentType, NameValueCollection nvc)
        {
            Console.WriteLine(string.Format("Uploading {0} to {1}", file, url));
            string boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x");
            byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes("\r\n--" + boundary + "\r\n");
 
            HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);
            //wr.ContentType = "multipart/form-data; boundary=" + boundary;
            wr.ContentType = "multipart/form-data; boundary=" + boundary;
            wr.Method = "POST";
            wr.KeepAlive = true;
            wr.Credentials = System.Net.CredentialCache.DefaultCredentials;
 
            System.IO.Stream rs = wr.GetRequestStream();
 
            string formdataTemplate = "Content-Disposition: form-data; name=\"{0}\"\r\n\r\n{1}";
            foreach (string key in nvc.Keys)
            {
                rs.Write(boundarybytes, 0, boundarybytes.Length);
                string formitem = string.Format(formdataTemplate, key, nvc[key]);
                byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);
                rs.Write(formitembytes, 0, formitembytes.Length);
            }
            rs.Write(boundarybytes, 0, boundarybytes.Length);
 
            string headerTemplate = "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n";
            string header = string.Format(headerTemplate, paramName, file, contentType);
            byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);
            rs.Write(headerbytes, 0, headerbytes.Length);
 
            FileStream fileStream = new FileStream(file, FileMode.Open, FileAccess.Read);
            byte[] buffer = new byte[4096];
            int bytesRead = 0;
            while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)
            {
                rs.Write(buffer, 0, bytesRead);
            }
            fileStream.Close();
 
            byte[] trailer = System.Text.Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");
            rs.Write(trailer, 0, trailer.Length);
            rs.Close();
 
            WebResponse wresp = null;
            try
            {
                wresp = wr.GetResponse();
                Stream stream2 = wresp.GetResponseStream();
                StreamReader reader2 = new StreamReader(stream2);
                return reader2.ReadToEnd();
            }
            catch (Exception ex)
            {
                if (wresp != null)
                {
                    wresp.Close();
                    wresp = null;
                }
 
 
                wresp = wr.GetResponse();
                Stream stream2 = wresp.GetResponseStream();
                StreamReader reader2 = new StreamReader(stream2);
                return reader2.ReadToEnd();
            }
            finally
            {
                wr = null;
            }
        }

        private void OnChangeLoadFile(object sender, DownloadProgressChangedEventArgs e)
        {
            this.ProgressPercentage = ((float)adapter.CurrentFileNumber / (float)adapter.FilesCount * 100);
        }

        private void OnCompleteLoadFile(object sender, DownloadDataCompletedEventArgs e)
        {
            this.ProgressPercentage = 100;
        }

        private void OnCompletedAllLoad(object sender, RunWorkerCompletedEventArgs e)
        {
            string directory = @"audio\";
            IOHandler.OpenPath(directory);
        }

        private void DoWork(object sender, DoWorkEventArgs e)
        {
            
            adapter.OnLoaded += this.OnCompleteLoadFile;
            adapter.OnProgress += this.OnChangeLoadFile;
            List<SoundModelView> soundModelList = new List<SoundModelView>();
            soundModelList.AddRange(Sounds);
            adapter.SyncFolderWithList<SoundModelView>(soundModelList, @"audio\");
        }
        #endregion


    }
}
